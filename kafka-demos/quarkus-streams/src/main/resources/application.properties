quarkus.kafka-streams.application-id=temperature-aggregator
quarkus.kafka-streams.default.key.serde=org.apache.kafka.common.serialization.Serdes$IntegerSerde
quarkus.kafka-streams.default.value.serde=io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
quarkus.kafka-streams.topics=weather-stations,temperature-values
quarkus.kafka-streams.schema-registry-url=http://localhost:8081

# streams options
kafka-streams.commit.interval.ms=1000
kafka-streams.metadata.max.age.ms=500
kafka-streams.auto.offset.reset=earliest
kafka-streams.metrics.recording.level=DEBUG
# Use sub-folder of embedded broker, so it gets cleaned by KafkaResource between re-runs
# This does not work for native tests, manually clean-up /tmp/kafka-streams/temperature-aggregator
%test.kafka-streams.state.dir=target/data/kafka-data/stores

kafka.bootstrap.servers=localhost:9092
schema.registry.url=http://localhost:8081

mp.messaging.connector.smallrye-kafka.schema.registry.url=http://localhost:8081

mp.messaging.outgoing.temperature-values.connector=smallrye-kafka
mp.messaging.outgoing.temperature-values.key.serializer=org.apache.kafka.common.serialization.IntegerSerializer
mp.messaging.outgoing.temperature-values.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer

mp.messaging.outgoing.weather-stations.connector=smallrye-kafka
mp.messaging.outgoing.weather-stations.key.serializer=org.apache.kafka.common.serialization.IntegerSerializer
mp.messaging.outgoing.weather-stations.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer

# we'll use the cluster from our docker-compose file
quarkus.devservices.enabled=false
